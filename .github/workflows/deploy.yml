name: Deploy deepiano-api to Server

on:
  push:
    branches:
      - main
      - dev
      - release/*

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 15  # 防止网络超时卡死

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Use variables
        run: |
          echo "remote_host variable : $remote_host"
          echo "remote_user variable : $remote_user"
          echo "remote_key variable : $remote_key"
          echo "vars.prod_deploy.SERVER_IP: ${{ vars.prod_deploy.SERVER_IP }}"
          echo "secrets.SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}"
          echo "secrets.prod_deploy.SSH_PRIVATE_KEY: ${{ secrets.prod_deploy.SSH_PRIVATE_KEY }}"

        env:
          remote_host: ${{ vars.SERVER_IP }}
          remote_user: ${{ vars.SERVER_USER }}
          remote_key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: 设置环境变量
        id: set-env
        run: |
          echo "DEPLOY_GIT_VERSION=${{ github.sha }}" >> $GITHUB_ENV
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            ENVIRONMENT=prod
          elif [[ "${{ github.ref }}" == "refs/heads/dev" ]]; then
            ENVIRONMENT=dev
          elif [[ "${{ github.ref }}" == refs/heads/release/* ]]; then
            ENVIRONMENT=pre
          else
            echo "不支持此分支部署"
            exit 1
          fi
          echo "部署项目: ${{ github.repository }}"
          echo "部署项目: ${{ github.repository_name }}"
          echo "部署分支: ${{ github.ref }}"
          echo "GIT版本号: ${{ github.sha }}"
          echo "部署环境: $ENVIRONMENT"
          
          APP_NAME="deepiano-api-${ENVIRONMENT}"
          OPS_LOCAL_PROJECT_SYNC_CODE="/srv/ops/deploy/projects/${APP_NAME}"
          echo "部署项目: ${APP_NAME}"
          echo "源码路径: ${OPS_LOCAL_PROJECT_SYNC_CODE}"
          
          echo "ENVIRONMENT=${ENVIRONMENT}" >> $GITHUB_ENV
          echo "APP_NAME=${APP_NAME}" >> $GITHUB_ENV
          echo "OPS_LOCAL_PROJECT_SYNC_CODE=${OPS_LOCAL_PROJECT_SYNC_CODE}" >> $GITHUB_ENV

      - name: Initialize the project code directory of the deployment server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ vars.SERVER_IP }}
          username: ${{ vars.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          envs: OPS_LOCAL_PROJECT_SYNC_CODE
          script: |
            if [[ -d "${OPS_LOCAL_PROJECT_SYNC_CODE}" ]]; then
              rm -rf "${OPS_LOCAL_PROJECT_SYNC_CODE}";
            fi
            echo "目录: ${OPS_LOCAL_PROJECT_SYNC_CODE}";
            mkdir -p "${OPS_LOCAL_PROJECT_SYNC_CODE}";

      - name: Install rsync (for incremental transfer)
        run: sudo apt-get install -y rsync

      - name: Push code to server via rsync
        uses: burnett01/rsync-deployments@7.0.2
        with:
          switches: -arcvz --delete --exclude="*.pyc" --exclude='__pycache__'  --progress   # 增量同步并删除冗余文件
          path: ./                 # 同步当前目录所有文件
          remote_path: ${OPS_LOCAL_PROJECT_SYNC_CODE}
          remote_host: ${{ vars.SERVER_IP }}
          remote_user: ${{ vars.SERVER_USER }}
          remote_key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Run Ansible Playbook
        uses: appleboy/ssh-action@master
        with:
          host: ${{ vars.SERVER_IP }}
          username: ${{ vars.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          envs: APP_NAME,OPS_LOCAL_PROJECT_SYNC_CODE,DEPLOY_GIT_VERSION
          script: |
            cd /srv/ops/ansible/apps
            #ansible-playbook deepiano-api.yml -i hosts.d/deepiano-api-hosts.yaml  -l $APP_NAME -e "DEPLOY_GIT_VERSION=$DEPLOY_GIT_VERSION"
